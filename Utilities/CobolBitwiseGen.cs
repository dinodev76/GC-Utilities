//*================================================================*
//* Author: Brian D Pead
//*
//* License: MIT
//*
//* Date        Version Description
//* ----        -------  -----------
//* 2020-02-08  1.0      First release
//*================================================================*

using System;
using System.IO;
using System.Linq;

namespace CobolBitwiseGen
{
  class CobolBitwiseGen
  {
    static StreamWriter sw;

    static void Main()
    {
      using (sw = new StreamWriter("BITWISEW.cpy"))
      {
        GenerateAndOrXor();
      }

      using (sw = new StreamWriter("HEXDUMPW.cpy"))
      {
        GenerateHex();
      }

      using (sw = new StreamWriter("CRC32W.cpy"))
      {
        GenerateCrc32();
      }
    }

    private static void GenerateAndOrXor()
    {
      WriteHeader();

      sw.WriteLine("       01  W-BITWISE-AND-OR-XOR.");

      for (int i = 0; i < 256; i++)
      {
        for (int j = 0; j < 256; j += 48)
        {
          sw.Write($"           05  FILLER-{i.ToString("000")}-{j.ToString("000")}");

          if (j == 240)
            sw.WriteLine("      PIC X(48)       VALUE");
          else
            sw.WriteLine("      PIC X(144)      VALUE");

          for (int k = 0; k < 48 && j + k <= 248; k += 8)
          {
            if (k == 0)
              sw.Write("                      X'");
            else
              sw.Write("      -                '");

            for (int m = 0; m < 8; m++)
            {
              sw.Write($"{((byte)i & (j + k + m)).ToString("X2")}"); // Bitwise AND
              sw.Write($"{((byte)i | (j + k + m)).ToString("X2")}"); // Bitwise OR
              sw.Write($"{((byte)i ^ (j + k + m)).ToString("X2")}"); // Bitwise XOR
            }

            sw.WriteLine();
          }

          sw.WriteLine("      -                ''.");
        }
      }

      sw.WriteLine("       01  FILLER REDEFINES W-BITWISE-AND-OR-XOR.");
      sw.WriteLine("           05  FILLER                              OCCURS 256.");
      sw.WriteLine("               10  W-BW-OP-VALUE                   OCCURS 256.");
      sw.WriteLine("                   15  W-BW-AND    PIC X(01).");
      sw.WriteLine("                   15  W-BW-OR     PIC X(01).");
      sw.WriteLine("                   15  W-BW-XOR    PIC X(01).");
    }

    private static void GenerateHex()
    {
      WriteHeader();

      sw.WriteLine("       01  W-HEXDUMP-TABLE.");

      for (int i = 0; i < 256; i += 64)
      {
        sw.Write($"           05  FILLER-{i.ToString("000")}");

        sw.WriteLine("          PIC X(128)      VALUE");

        for (int j = 0; j < 64; j += 16)
        {
          if (j == 0)
            sw.Write("                                       '");
          else
            sw.Write("      -                                '");

          for (int k = 0; k < 16; k++)
          {
            sw.Write($"{((byte)(i + j + k)).ToString("X2")}");
          }

          sw.WriteLine();
        }

        sw.WriteLine("      -                                ''.");
      }

      sw.WriteLine("       01  FILLER REDEFINES W-HEXDUMP-TABLE.");
      sw.WriteLine("           05  W-HEX-CHARS         PIC X(02)       OCCURS 256.");
    }

    private static void GenerateCrc32()
    {
      UInt32 generator = 0xEDB88320;

      // Construct CRC32 checksum lookup table, used to optimize the checksum:
      UInt32[] checksumTable = Enumerable.Range(0, 256).Select(i =>
      {
        var tableEntry = (uint)i;

        for (var j = 0; j < 8; ++j)
        {
          tableEntry = ((tableEntry & 1) != 0)
              ? (generator ^ (tableEntry >> 1))
              : (tableEntry >> 1);
        }

        return tableEntry;
      }).ToArray();

      WriteHeader();

      sw.WriteLine("       01  W-CRC32-TABLE.");

      for (int i = 0; i < 256; i++)
      {
        sw.WriteLine($"           05  FILLER-{i.ToString("000")}          PIC 9(09)  COMP VALUE {checksumTable[i].ToString().PadLeft(10)}.");
      }

      sw.WriteLine("       01  FILLER REDEFINES W-CRC32-TABLE.");
      sw.WriteLine("           05  W-CRC32-ENTRY       PIC 9(09)  COMP OCCURS 256.");
    }

    private static void WriteHeader()
    {
      sw.WriteLine("      *================================================================*");
      sw.WriteLine("      *         Table generated by C# program CobolBitwiseGen          *");
      sw.WriteLine("      *                                                                *");
      sw.WriteLine("      *         Author: Brian D Pead                                   *");
      sw.WriteLine("      *                                                                *");
      sw.WriteLine("      *         License: MIT                                           *");
      sw.WriteLine("      *                                                                *");
      sw.WriteLine($"      *         Date: {DateTime.Now.ToString("yyyy-MM-dd")}                                       *");
      sw.WriteLine("      *================================================================*");
      sw.WriteLine();
    }
  }
}
